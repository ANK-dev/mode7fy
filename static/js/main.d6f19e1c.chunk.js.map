{"version":3,"sources":["components/Header/Header.tsx","components/Mode7/Mode7Control.tsx","components/Mode7/Mode7Controls.tsx","components/Mode7/Mode7Canvas.tsx","components/Mode7/Mode7.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","Navbar","bg","variant","expand","sticky","sidebarState","open","Button","id","onClick","toggleSidebar","Brand","className","Text","href","Mode7Control","Form","Group","controlId","name","Label","label","value","Control","type","min","max","onChange","Mode7Controls","state","height","width","zDepth","scaleX","scaleY","angle","offsetX","offsetY","setState","resetState","handleChange","e","prop","prevstate","target","valueAsNumber","a","texture","Image","src","decode","textureCanvas","document","createElement","naturalWidth","naturalHeight","textureCtx","getContext","drawImage","mainCanvas","getElementById","mainCtx","x","y","z","x_","y_","cos","Math","PI","sin","canvas","getImageData","canvasData","data","textureData","isNaN","floor","putImageData","Mode7Canvas","useEffect","fillCanvas","window","innerWidth","innerHeight","Mode7","defaultState","useState","Container","fluid","Row","Col","md","App","setSidebarState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d6f19e1c.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Button} from 'react-bootstrap';\n\nimport { IStateSidebar } from '../App/App';\n\nimport './Header.scss';\n\ninterface IHeader {\n  sidebarState: IStateSidebar;\n  toggleSidebar: () => void;\n}\n\nconst Header: React.FC<IHeader> = (props) => {\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n      {\n        props.sidebarState.open\n          ? <Button id=\"menu\" onClick={props.toggleSidebar}>&times;</Button>\n          : <Button id=\"menu\" onClick={props.toggleSidebar}>+</Button>\n      }\n      <Navbar.Brand className=\"font-italic mr-auto\">MODE7FY</Navbar.Brand>\n      <Navbar.Text><a href=\"https://github.com/ANK-dev\">by ANK-dev</a></Navbar.Text>\n    </Navbar>\n  );\n}\n\nexport default Header;","import { Form } from 'react-bootstrap';\n\ninterface IControlProps {\n  label: string;\n  name: string;\n  min: number;\n  max: number;\n  value: number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Mode7Control: React.FC<IControlProps> = (props) => {\n  return (\n    <Form.Group controlId={`${props.name}-range`}>\n      <Form.Label>{props.label}</Form.Label>\n      <p id={`${props.name}-range-value`}>{props.value}</p>\n      <Form.Control\n        type=\"range\"\n        name={`${props.name}-range`}\n        min={props.min}\n        max={props.max}\n        value={props.value}\n        onChange={props.onChange}\n    />\n    </Form.Group>\n  );\n}\n\nexport default Mode7Control;","import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nimport { IStateProps } from './Mode7';\nimport Mode7Control from './Mode7Control';\n\nimport './Mode7.scss';\n\ninterface IMode7Controls {\n  state: IStateProps;\n  setState: React.Dispatch<React.SetStateAction<IStateProps>>;\n  resetState: () => void;\n};\n\nconst Mode7Controls: React.FC<IMode7Controls> = (props) => {\n\n  const {height, width, zDepth, scaleX, scaleY, angle, offsetX, offsetY} = props.state;\n  const setState = props.setState;\n  const resetState = props.resetState;\n\n  // Restricts valid props as defined in the interface\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, prop: keyof IStateProps) => {\n    setState((prevstate) => ({...prevstate, [prop]: e.target.valueAsNumber }))\n  }\n\n  //TODO: Set ranges from object?\n  return (\n    <div id=\"Mode7Controls\">\n      <h4>Controls</h4>\n      <Form>\n        <Mode7Control\n          label=\"Z Depth\"\n          name=\"z-depth\"\n          min={-500}\n          max={500}\n          value={zDepth}\n          onChange={(e) => handleChange(e, 'zDepth')}\n        />\n        <Mode7Control\n          label=\"Height\"\n          name=\"height\"\n          min={100}\n          max={1000}\n          value={height}\n          onChange={(e) => handleChange(e, 'height')}\n        />\n        <Mode7Control\n          label=\"Width\"\n          name=\"width\"\n          min={100}\n          max={1000}\n          value={width}\n          onChange={(e) => handleChange(e, 'width')}\n        />\n        <Mode7Control\n          label=\"Scale X\"\n          name=\"scale-x\"\n          min={1}\n          max={64}\n          value={scaleX}\n          onChange={(e) => handleChange(e, 'scaleX')}\n        />\n        <Mode7Control\n          label=\"Scale Y\"\n          name=\"scale-y\"\n          min={1}\n          max={64}\n          value={scaleY}\n          onChange={(e) => handleChange(e, 'scaleY')}\n        />\n        <Mode7Control\n          label=\"Rotation Angle\"\n          name=\"angle\"\n          min={0}\n          max={360}\n          value={angle}\n          onChange={(e) => handleChange(e, 'angle')}\n        />\n        <Mode7Control\n          label=\"Offset X\"\n          name=\"offset-x\"\n          min={0}\n          max={360}\n          value={offsetX}\n          onChange={(e) => handleChange(e, 'offsetX')}\n        />\n        <Mode7Control\n          label=\"Offset Y\"\n          name=\"offset-y\"\n          min={0}\n          max={360}\n          value={offsetY}\n          onChange={(e) => handleChange(e, 'offsetY')}\n        />\n      </Form>\n      <Button onClick={resetState}>Reset</Button>\n    </div>\n  );\n}\n\n  export default Mode7Controls;","import { useEffect } from 'react';\n\nimport { IStateProps } from './Mode7';\n\nasync function fillCanvas(props: IStateProps) {\n  const texture = new Image();\n  texture.src = './texture2.png';\n  await texture.decode();\n\n  /**************************** Off-Screen Canvas *****************************/\n\n  // Creates an off-screen canvas to store the image as a texture\n  const textureCanvas = document.createElement('canvas');\n  textureCanvas.width = texture.naturalWidth;\n  textureCanvas.height = texture.naturalHeight;\n\n  // Gets a handle and draws texture to off-screen canvas\n  const textureCtx = textureCanvas.getContext('2d');\n  textureCtx?.drawImage(texture, 0, 0, texture.width, texture.height);\n\n  /***************************** On-Screen Canvas *****************************/\n\n  // Gets a handle to the on-screen canvas element\n  // TODO: change `getElementById` to React Refs?\n  const mainCanvas = document.getElementById('main-canvas') as HTMLCanvasElement;\n  const mainCtx = mainCanvas?.getContext('2d');\n\n  mainCanvas.height = props.height;\n  mainCanvas.width = props.width;\n\n  /****************************************************************************/\n\n  let x = 0;\n  let y = 0;\n  let z = props.zDepth;\n  let scaleX = props.scaleX;\n  let scaleY = props.scaleY;\n\n  let x_ = 0;\n  let y_ = 0;\n\n  let offsetX = props.offsetX;\n  let offsetY = props.offsetY;\n\n  // Corrects angle offset\n  let angle = props.angle - 45;\n\n  // Conversion of degrees to radians\n  let cos = Math.cos(angle * (Math.PI/180));\n  let sin = Math.sin(angle * (Math.PI/180));\n\n  // Gets pixel data from main canvas\n  let canvas = mainCtx?.getImageData(0, 0, mainCanvas.width, mainCanvas.height)\n  let canvasData = canvas?.data;\n\n  // Gets pixel data from texture canvas\n  let textureData = textureCtx?.getImageData(0, 0, texture.width, texture.height).data;\n\n  for (y = 0; y < mainCanvas.height; y++) {\n\n    for (x = 0; x < mainCanvas.width; x++) {\n\n      // Fill the skybox with solid color\n      if (z < 0){\n        canvasData![(y * mainCanvas.width! + x) * 4 + 0] = 0;     // R\n        canvasData![(y * mainCanvas.width! + x) * 4 + 1] = 204;   // G\n        canvasData![(y * mainCanvas.width! + x) * 4 + 2] = 255;   // B\n        canvasData![(y * mainCanvas.width! + x) * 4 + 3] = 255;   // A\n        continue;\n      }\n\n      y_ = (((mainCanvas.width - x) * cos - (x) * sin)) / z;\n      x_ = (((mainCanvas.width - x) * sin + (x) * cos)) / z;\n\n      if (y_ < 0) { y_ *= -1; }\n      if (x_ < 0) { x_ *= -1; }\n\n      y_ *= scaleY;\n      x_ *= scaleX;\n\n      y_ += offsetY;\n      x_ += offsetX;\n\n      y_ %= texture.height;\n      x_ %= texture.width;\n\n      if (isNaN(x_) || isNaN(y_)) {\n        x_ = 0;\n        y_ = 0;\n      }\n\n      // Truncate fraction part\n      x_ = Math.floor(x_);\n      y_ = Math.floor(y_);\n\n      // To RGBA format\n      canvasData![(y * mainCanvas.width! + x) * 4 + 0] = textureData![(y_ * texture.width! + x_) * 4 + 0]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 1] = textureData![(y_ * texture.width! + x_) * 4 + 1]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 2] = textureData![(y_ * texture.width! + x_) * 4 + 2]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 3] = textureData![(y_ * texture.width! + x_) * 4 + 3]\n\n    }\n    z++;\n  }\n  mainCtx?.putImageData(canvas!, 0, 0);\n\n}\n\ninterface IMode7Canvas {\n  state: IStateProps;\n};\n\nconst Mode7Canvas: React.FC<IMode7Canvas> = (props) => {\n\n  useEffect(() => {\n    fillCanvas(props.state);\n  }, [props]);\n\n\n  return (\n    <div id=\"Mode7Canvas\">\n      <canvas id=\"main-canvas\" width={window.innerWidth} height={window.innerHeight}></canvas>\n    </div>\n  );\n}\n\nexport default Mode7Canvas;","import Mode7Controls from './Mode7Controls';\nimport Mode7Canvas from './Mode7Canvas';\nimport { useState } from 'react';\nimport { IStateSidebar } from '../App/App';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './Mode7.scss';\n\nexport interface IStateProps {\n  height: number;\n  width: number;\n  zDepth: number;\n  scaleX: number;\n  scaleY: number;\n  angle: number;\n  offsetX: number;\n  offsetY: number;\n};\n\ninterface IMode7 {\n  sidebarState: IStateSidebar;\n}\n\nconst Mode7: React.FC<IMode7> = (props) => {\n  const defaultState: IStateProps = {\n    height  : 240,\n    width   : 320,\n    zDepth  : -50,\n    scaleX  : 16,\n    scaleY  : 16,\n    angle   : 0,\n    offsetX : 0,\n    offsetY : 0\n  };\n\n  const [state, setState] = useState({\n    ...defaultState\n  });\n\n  const resetState = () => setState((prevstate) => ({\n    ...defaultState\n  }));\n\n  return (\n    <div id=\"Mode7\">\n      <Container fluid>\n        <Row>\n          {\n            props.sidebarState.open &&\n            <Col md={2} id=\"sidebar\">\n                <Mode7Controls\n                  state={state}\n                  setState={setState}\n                  resetState={resetState}\n                />\n            </Col>\n          }\n          <Col id=\"main-area\">\n            <Mode7Canvas state={state}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Mode7;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from '../Header/Header';\nimport Mode7 from '../Mode7/Mode7';\n\nexport interface IStateSidebar {\n  open: boolean;\n}\n\nconst App: React.FC = () => {\n\n  const sidebarInitialState = {\n    open: true\n  }\n\n  const [sidebarState, setSidebarState] = useState({\n    ...sidebarInitialState\n  })\n\n  const toggleSidebar = () => {\n    setSidebarState((prevstate) => ({open: !prevstate.open}))\n  }\n\n  return (\n    <div className=\"App\">\n      <Header sidebarState={sidebarState} toggleSidebar={toggleSidebar}/>\n      <Mode7 sidebarState={sidebarState}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header/Header.tsx","components/Mode7/Mode7Control.tsx","components/Mode7/Mode7Controls.tsx","components/Mode7/Mode7Canvas.tsx","components/Mode7/Mode7.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Navbar","bg","variant","expand","Brand","className","Text","href","Mode7Control","props","Form","Group","controlId","name","Label","label","id","value","Control","type","min","max","onChange","Mode7Controls","state","height","width","zDepth","scaleX","scaleY","angle","setState","resetState","handleChange","e","prop","prevstate","target","valueAsNumber","Button","onClick","a","texture","Image","src","decode","textureCanvas","document","createElement","naturalWidth","naturalHeight","textureCtx","getContext","drawImage","mainCanvas","getElementById","mainCtx","x","y","z","x_","y_","cos","Math","PI","sin","canvas","getImageData","canvasData","data","textureData","isNaN","floor","putImageData","Mode7Canvas","useEffect","fillCanvas","window","innerWidth","innerHeight","Mode7","defaultState","useState","Container","fluid","Row","Col","md","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ed1e5bba.chunk.js","sourcesContent":["import { Navbar } from 'react-bootstrap';\n\nconst Header: React.FC = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand className=\"font-italic mr-auto\">MODE7FY</Navbar.Brand>\n      <Navbar.Text><a href=\"https://github.com/ANK-dev\">by ANK-dev</a></Navbar.Text>\n    </Navbar>\n  );\n}\n\nexport default Header;","import { Form } from 'react-bootstrap';\n\ninterface IControlProps {\n  label: string;\n  name: string;\n  min: number;\n  max: number;\n  value: number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Mode7Control: React.FC<IControlProps> = (props) => {\n  return (\n    <Form.Group controlId={`${props.name}-range`}>\n      <Form.Label>{props.label}</Form.Label>\n      <p id={`${props.name}-range-value`}>{props.value}</p>\n      <Form.Control\n        type=\"range\"\n        name={`${props.name}-range`}\n        min={props.min}\n        max={props.max}\n        value={props.value}\n        onChange={props.onChange}\n    />\n    </Form.Group>\n  );\n}\n\nexport default Mode7Control;","import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport Mode7Control from './Mode7Control';\n\nimport './Mode7.scss';\n\ninterface IStateProps {\n  height: number\n  width: number;\n  zDepth: number;\n  scaleX: number;\n  scaleY: number;\n  angle: number;\n}\n\ninterface IMode7Controls {\n  state: IStateProps;\n  setState: React.Dispatch<React.SetStateAction<IStateProps>>;\n  resetState: () => void;\n};\n\nconst Mode7Controls: React.FC<IMode7Controls> = (props) => {\n\n  const {height, width, zDepth, scaleX, scaleY, angle} = props.state;\n  const setState = props.setState;\n  const resetState = props.resetState;\n\n  // TODO: fix any hack with proper type\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, prop: string) => {\n    setState((prevstate) => ({...prevstate, [prop]: e.target.valueAsNumber }))\n  }\n\n  //TODO: Set ranges from object?\n  return (\n    <div id=\"Mode7Controls\">\n      <h4>Controls</h4>\n\n      <Form>\n        <Mode7Control\n          label=\"Z Depth\"\n          name=\"z-depth\"\n          min={1}\n          max={500}\n          value={zDepth}\n          onChange={(e) => handleChange(e, 'zDepth')}\n        />\n        <Mode7Control\n          label=\"Height\"\n          name=\"height\"\n          min={100}\n          max={1000}\n          value={height}\n          onChange={(e) => handleChange(e, 'height')}\n        />\n        <Mode7Control\n          label=\"Width\"\n          name=\"width\"\n          min={100}\n          max={1000}\n          value={width}\n          onChange={(e) => handleChange(e, 'width')}\n        />\n        <Mode7Control\n          label=\"Scale X\"\n          name=\"scale-x\"\n          min={1}\n          max={64}\n          value={scaleX}\n          onChange={(e) => handleChange(e, 'scaleX')}\n        />\n        <Mode7Control\n          label=\"Scale Y\"\n          name=\"scale-y\"\n          min={1}\n          max={64}\n          value={scaleY}\n          onChange={(e) => handleChange(e, 'scaleY')}\n        />\n        <Mode7Control\n          label=\"Rotation Angle\"\n          name=\"angle\"\n          min={0}\n          max={360}\n          value={angle}\n          onChange={(e) => handleChange(e, 'angle')}\n        />\n      </Form>\n      <Button onClick={resetState}>Reset</Button>\n    </div>\n    );\n  }\n\n  export default Mode7Controls;","import { useEffect } from \"react\";\n\ninterface IStateProps {\n  height: number;\n  width: number;\n  zDepth: number;\n  scaleX: number;\n  scaleY: number;\n  angle: number;\n\n};\n\ninterface IMode7Canvas {\n  state: IStateProps;\n};\n\nasync function fillCanvas(props: IStateProps) {\n  const texture = new Image();\n  texture.src = './texture2.png';\n  await texture.decode();\n\n  // Creates an off-screen canvas to store the image as a texture\n  const textureCanvas = document.createElement('canvas');\n  textureCanvas.width = texture.naturalWidth;\n  textureCanvas.height = texture.naturalHeight;\n\n  const textureCtx = textureCanvas.getContext('2d');\n  textureCtx?.drawImage(texture, 0, 0, texture.width, texture.height);\n\n\n  const mainCanvas = document.getElementById('main-canvas') as HTMLCanvasElement;\n  const mainCtx = mainCanvas?.getContext('2d');\n\n  mainCanvas.height = props.height;\n  mainCanvas.width = props.width;\n\n  // const mainCanvasWidthCenter = mainCanvas.width / 2;\n  // const mainCanvasHeightCenter = mainCanvas.height / 2;\n\n  let x = 0;\n  let y = 0;\n  let z = props.zDepth * -1;\n  // let z = mainCanvasHeightCenter * -1;\n  let scaleX = props.scaleX;\n  // let scaleX = 16;\n  let scaleY = props.scaleY;\n  // let scaleY = 16;\n\n  let x_ = 0;\n  let y_ = 0;\n\n  let angle = props.angle;\n\n  // Conversion of degrees to radians\n  let cos = Math.cos(angle * (Math.PI/180));\n  let sin = Math.sin(angle * (Math.PI/180));\n\n\n  let canvas = mainCtx?.getImageData(0, 0, mainCanvas.width, mainCanvas.height)\n  let canvasData = canvas?.data;\n\n  let textureData = textureCtx?.getImageData(0, 0, texture.width, texture.height).data;\n\n  for (y = 0; y < mainCanvas.height; y++) {\n\n    for (x = 0; x < mainCanvas.width; x++) {\n\n      // Fill the skybox with solid color\n      if (z < 0){\n        canvasData![(y * mainCanvas.width! + x) * 4 + 0] = 0;\n        canvasData![(y * mainCanvas.width! + x) * 4 + 1] = 204;\n        canvasData![(y * mainCanvas.width! + x) * 4 + 2] = 255;\n        canvasData![(y * mainCanvas.width! + x) * 4 + 3] = 255;\n        continue;\n      }\n\n      y_ = (((mainCanvas.width - x) * cos - (x) * sin)) / z;\n      x_ = (((mainCanvas.width - x) * sin + (x) * cos)) / z;\n\n      if (y_ < 0) { y_ *= -1; }\n      if (x_ < 0) { x_ *= -1; }\n\n      y_ *= scaleY;\n      x_ *= scaleX;\n\n      y_ %= texture.height;\n      x_ %= texture.width;\n      // x_ = (mainCanvasWidthCenter - x) / z;\n      // if (x_ < 0) {\n      //   x_ *= -1;\n      // }\n      // x_ *= scaleX;\n      // x_ %= texture.width;\n\n      if (isNaN(x_) || isNaN(y_)) {\n        x_ = 0;\n        y_ = 0;\n      }\n\n      // Truncate fraction part\n      x_ = Math.floor(x_);\n      y_ = Math.floor(y_);\n\n      // To RGBA format\n      canvasData![(y * mainCanvas.width! + x) * 4 + 0] = textureData![(y_ * texture.width! + x_) * 4 + 0]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 1] = textureData![(y_ * texture.width! + x_) * 4 + 1]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 2] = textureData![(y_ * texture.width! + x_) * 4 + 2]\n      canvasData![(y * mainCanvas.width! + x) * 4 + 3] = textureData![(y_ * texture.width! + x_) * 4 + 3]\n\n    }\n    z++;\n  }\n  mainCtx?.putImageData(canvas!, 0, 0);\n\n}\n\nconst Mode7Canvas: React.FC<IMode7Canvas> = (props) => {\n\n  useEffect(() => {\n    fillCanvas(props.state);\n  }, [props]);\n\n\n  return (\n    <div id=\"Mode7Canvas\">\n      <canvas id=\"main-canvas\" width={window.innerWidth} height={window.innerHeight}></canvas>\n    </div>\n  );\n}\n\nexport default Mode7Canvas;","import Mode7Controls from './Mode7Controls';\nimport Mode7Canvas from './Mode7Canvas';\nimport { useState } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './Mode7.scss';\n\nconst Mode7: React.FC = () => {\n\n  const defaultState = {\n    height : 240,\n    width  : 320,\n    zDepth : 100,\n    scaleX : 16,\n    scaleY : 16,\n    angle  : 45\n  }\n\n  const [state, setState] = useState({\n    ...defaultState\n  })\n\n  const resetState = () => setState((prevstate) => ({\n    ...defaultState\n  }))\n\n  return (\n    <div id=\"Mode7\">\n      <Container fluid>\n        <Row>\n          <Col md={2} id=\"sidebar\" >\n            <Mode7Controls state={state} setState={setState} resetState={resetState}/>\n          </Col>\n          <Col id=\"main-area\">\n            <Mode7Canvas state={state}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Mode7;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from '../Header/Header';\nimport Mode7 from '../Mode7/Mode7';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Mode7/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}